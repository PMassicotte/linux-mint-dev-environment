# Installing R

Note: Before installing R, make sure that you have the latest gdal, geos libraries installed so `terra`, `sf` and other R packages compile correctly.

## Installing the latest R version

These instructions are from [how to set up R on Ubuntu](https://blog.zenggyu.com/en/post/2018-01-29/installing-r-r-packages-e-g-tidyverse-and-rstudio-on-ubuntu-linux/).

First, open `sources.list`:

```bash
sudo nano /etc/apt/sources.list
```

Then add this:

```bash
deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/
```

```bash
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
sudo apt install libcurl4-openssl-dev libssl-dev libxml2-dev libfontconfig1-dev libcairo2-dev
```

Finally, install R:

``` bash
sudo apt update
sudo apt install r-base
```

## Installing R binaries for Ubuntu

After playing around, I found that the easiest way for me to install binary R packages on my Linux Mint system was to use [RStudio Package Manager](https://docs.rstudio.com/rpm/documentation/). To use it, simply add the following line as the primary library repository:

```bash
https://packagemanager.rstudio.com/cran/__linux__/focal/latest
```

![](images/rspm.png)

After that, simply use `install.packages()` as you would normally do. If you want to change the location where packages are installed, I recommend this [blog post](https://zkamvar.netlify.app/blog/using-a-custom-library-in-r/).

## renv

- https://support.rstudio.com/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf

- https://github.com/grantmcdermott/renv-rspm

Another version here (for focal):

- https://github.com/rocker-org/rocker/tree/master/r-rspm/focal

or

```
if (Sys.info()[['sysname']] %in% c('Linux', 'Windows')) {
  options(repos = c(RSPM = "https://packagemanager.rstudio.com/all/__linux__/focal/latest"))
} else {
  ## For Mac users, we'll default to installing from CRAN/MRAN instead, since
  ## RSPM does not yet support Mac binaries.
  options(repos = c(CRAN = "https://cran.rstudio.com/"))
  # options(renv.config.mran.enabled = TRUE) ## TRUE by default
}
options(renv.config.repos.override = getOption("repos"))
```

I think this is the thing I should use... However, it looks like that `RSPM` is not detecting that I am under a Ubuntu-based distro and do not redirect me on the binairy versions of the packages.

```
if (Sys.info()[['sysname']] %in% c('Linux', 'Windows')) {
  options(repos = c(CRAN = "https://packagemanager.rstudio.com/all/latest"))
} else {
  ## For Mac users, we'll default to installing from CRAN/MRAN instead, since
  ## RSPM does not yet support Mac binaries.
  options(repos = c(CRAN = "https://cran.rstudio.com/"))
  # options(renv.config.mran.enabled = TRUE) ## TRUE by default
}
options(renv.config.repos.override = getOption("repos"))
```

Can be set in `.Rprofile` of the current project or per user using `usethis::edit_r_profile()`.

## Using rig

[rig](https://github.com/r-lib/rig) a tool to manage different version of R installation on your computer. 

To install it (note that the destination path is not the same as the one shown on the `rig` website because R was installed in `/usr/` and not `/usr/local/`):

```bash
curl -Ls curl -Ls https://github.com/r-lib/rig/releases/download/v0.5.0/rig-linux-0.5.0.tar.gz | sudo tar xz -C /usr/
```

Once installed, one can install different versions of R like so:

```bash
rig add 4.1.0
rig add 4.2.0
```

Starting RStudio with a specific version of R can be done with:

```bash
rig rstudio 4.1.0
```

It is also possible to start RStudio with a specific version of R that is defined in the `renv` lcok file:

```bash
rig rstudio <renv-lockfile> 
```


## RStudio

### Installing themes

```r
devtools::install_github("gadenbuie/rsthemes")
```

These can be visualized with:

```r
rsthemes::try_rsthemes()
```

## Compiling R with Intel MKL math libraries


### Install Intel MKL

```bash
cd /tmp
wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB

sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
sudo sh -c 'echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list'

sudo apt install intel-mkl-64bit-2020.1-102 

source /opt/intel/mkl/bin/mklvars.sh intel64
```

## Compile and install R with MKL

Download and decompress R source files.

```bash
tar -zxvf R-4.0.0.tar.gz
```

```bash
./configure --enable-R-shlib --enable-threads=posix --with-lapack --with-blas="-fopenmp -m64 -I$MKLROOT/include -L$MKLROOT/lib/intel64 -lmkl_gf_lp64 -lmkl_gnu_thread -lmkl_core -lpthread -lm"

make -j24
make pdf
make info
make install
make install-info
make install-pdf

sudo make install
```

### Ressources

- https://www.r-bloggers.com/compiling-r-3-0-1-with-mkl-support/
- https://software.intel.com/content/www/us/en/develop/articles/installing-intel-free-libs-and-python-apt-repo.html
- https://software.intel.com/content/www/us/en/develop/articles/using-intel-mkl-with-r.html


### Benchmark

```{r mkl_benchmark}
#| echo: true
#| message: false
#| warning: false
#| cache: true
source("https://mac.r-project.org/benchmarks/R-benchmark-25.R")
```

