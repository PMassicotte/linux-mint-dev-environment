# Installing R

## Installing the latest R version

These instructions are from [how to set up R on Ubuntu](https://blog.zenggyu.com/en/post/2018-01-29/installing-r-r-packages-e-g-tidyverse-and-rstudio-on-ubuntu-linux/).

First, open `sources.list`:

``` bash
sudo nano /etc/apt/sources.list
```

Then add this:

``` bash
deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/
```

``` bash
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
sudo apt install libcurl4-openssl-dev libssl-dev libxml2-dev libfontconfig1-dev libcairo2-dev
```

Finally, install R:

``` bash
sudo apt update
sudo apt install r-base
```

## Installing R binaries for Ubuntu

After playing around, I found that the easiest way for me to install binary R packages on my Linux Mint system was to use [RStudio Package Manager](https://docs.rstudio.com/rpm/documentation/). To use it, simply add the following line as the primary library repository:

```bash
https://packagemanager.rstudio.com/cran/__linux__/focal/latest
```

![](images/rspm.png)

After that, simply use `install.packages()` as you would normally do. If you want to change the location where packages are installed, I recommend this [blog post](https://zkamvar.netlify.app/blog/using-a-custom-library-in-r/).

## Using rig

[rig](https://github.com/r-lib/rig) a tool to manage different version of R installation on your computer. 

To install it:

```bash
curl -Ls https://github.com/r-lib/rig/releases/download/v0.4.1/rig-linux-0.4.1.tar.gz | sudo tar xz -C /usr/
```

Once installed, one can install different versions of R like so:

```bash
rig add 4.1.0
rig add 4.2.0
```

Starting RStudio with a specific version of R can be done with:

```bash
rig rstudio 4.1.0
```

## RStudio

### Installing themes

```r
devtools::install_github("gadenbuie/rsthemes")
```

These can be visualized with:

```r
rsthemes::try_rsthemes()
```

